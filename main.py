from aiogram import Bot, Dispatcher, executor, types
from keyboards import *
from config import Token
from txtToMsg import *

bot = Bot(Token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!")
    await bot.send_message(chat_id=message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                           reply_markup=ikmStart)


@dp.callback_query_handler()
async def callback(callback: types.callback_query):
    if callback.data == 'scheme2023':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ –∫—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ üëá',
                                         reply_markup=ikm2023)
    elif callback.data == 'arbuz1':
        await callback.message.edit_text(Abuz1, reply_markup=ikmarbuz)
    elif callback.data == 'opl':
        await callback.message.edit_text("–¥–µ–Ω—è–∫ —Å—É–¥–∞: –∏ —Ç—É—Ç –∫–æ—Ä–æ—á–µ –∫–æ—à–µ–ª—ë–∫, —è –µ–±—É?", reply_markup=ikmbc)
    elif callback.data == 'promo':
        await callback.message.edit_text("–Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–º–æ, –∏–¥–∏ –Ω–∞—Ö—É–π", reply_markup=ikmbc)
    elif callback.data == 'start':
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ikmStart)
    else:
        await  callback.answer("–ù–µ–≥–æ—Ç–æ–≤–æ–ª–µ–Ω—å–±—ã–ª–æ")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
